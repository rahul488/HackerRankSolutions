class Solution {
    public int search(int[] nums, int target) {
    
        int idx=0;
        int pivot=findPivot(nums,0,nums.length-1);
        if(pivot == -1)
            return binarySearch(nums, 0, nums.length-1, target);
        if(nums[pivot]==target)
            return pivot;
        if(nums[0] <= target)
            idx=binarySearch(nums,0,pivot-1,target);
        else
            idx=binarySearch(nums,pivot+1,nums.length-1,target);
        return idx;
    }
    public static int findPivot(int a[],int start,int end)
    {
        
          if (end < start)   
            return -1; 
       if (start == end)  
            return start; 
        int mid=(start+end)/2;
       if(a[mid] > a[mid+1])
           return mid+1;
        else if(a[start] > a[mid])
            return findPivot(a,start,mid-1);
        else
            return findPivot(a,mid+1,end);
    }
    public static int binarySearch(int a[],int first,int last,int key)
    {
        int mid=-1;
        while(first<=last)
        {
            mid=(first+last)/2;
            
            if(a[mid]==key)
                return mid;
            
            if(key > a[mid])
            {
                first=mid+1;
            }
            else
            {
                last=mid-1;
            }
        }
        return -1;
    }
}
