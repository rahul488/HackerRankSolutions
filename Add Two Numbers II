/*

You are given two non-empty linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Follow up:
What if you cannot modify the input lists? In other words, reversing the lists is not allowed.

Example:

Input: (7 -> 2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 8 -> 0 -> 7

*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        
        Stack<Integer> s1=new Stack<>();
        Stack<Integer> s2=new Stack<>();
        Stack<Integer> s3=new Stack<>();
        ListNode head1=l1;
        ListNode head2=l2;
        while(head1!=null){
            s1.push(head1.val);
            head1=head1.next;
        }
        while(head2!=null){
            s2.push(head2.val);
            head2=head2.next;
        }
        int carry=0;
        while(!s1.isEmpty() || !s2.isEmpty()){
            int sum=(s1.isEmpty()?0:s1.pop())+(s2.isEmpty()?0:s2.pop())+carry;
            
            s3.push(sum%10);
            
            carry=sum/10;
        }
        if(carry > 0)
            s3.push(carry);
        ListNode ans=new ListNode(-1);
        ListNode dummy=ans;
        while(!s3.isEmpty()){
            dummy.next=new ListNode(s3.pop());
            dummy=dummy.next;
        }
        return ans.next;
    }
}
